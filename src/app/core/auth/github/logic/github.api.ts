import { Observable } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { IllegalStateError } from '../../../error/type/illegal-state.error';
import {map, mergeMap, tap} from 'rxjs/operators';
import { User } from '../../../../shared/models/user.model';
import {GithubRepo} from '../../../../shared/models/github/github-repo.model';
import {GithubContent} from '../../../../shared/models/github/github-content.model';
import {environment} from '../../../../../environments/environment';

/**
 * Communicates with GitHub.
 */
@Injectable({providedIn: 'root'})
export class GithubApi {

  /**
   * Dependency injection constructor.
   */
  constructor(
    private httpClient: HttpClient,
  ) {}

  /**
   * Retrieves the token.
   *
   * @param code The temporary authentication code
   */
  getToken(code?: any): Observable<string> {
    return this.httpClient.get<string>(environment.oauthURI, {params: new HttpParams().append('code', code)});
  }

  /**
   * Retrieves the user.
   *
   * @param token The token
   */
  getUser(token: string): Observable<User> {
    if (!token) {
      console.error('No github token');
      throw new IllegalStateError('No github token !');
    }
    return this.httpClient.get<User>(this.getBaseUri() + '/user');
  }

  getRepository(user: string, repoName: string): Observable<GithubRepo>{
    return this.httpClient.get<any>(this.getBaseUri() + `/repos/${user}/${repoName}`);
  }

  createRepository(user: string, repoName: string): Observable<GithubRepo> {
    return this.httpClient.post<any>(this.getBaseUri() + `/user/repos`, {
      name: repoName,
      description: 'Autogenerated repository !',
      private: true,
      has_wiki: false,
      has_projects: false,
      has_issues: false,
    }, { headers: {accept: 'application/vnd.github.v3+json' }});
  }

  createDatabase(login: string, repoName: string, filePath: string): any {
    return this.httpClient.put(this.getBaseUri() + `/repos/${login}/${repoName}/contents/${filePath}`,
      {
        message: '[Auto] Database initialization',
        content: btoa('content'),
      });
  }

  saveDatabase(login: string, repoName: string, filePath: string, stringContent: string): Observable<any> {
    return this.getFileInfo(login, repoName, filePath).pipe(
      tap(val => console.log('val:' + val)),
      mergeMap(existing => {
        return this.httpClient.put(this.getBaseUri() + `/repos/${login}/${repoName}/contents/${filePath}`,
          {
            message: '[Auto] Database commit',
            content: btoa(stringContent),
            sha: existing.sha,
          });
      })
    );
  }

  /**
   * Retrieves the database.
   */
  getFileInfo(user: string, repoName: string, filePath: string): Observable<GithubContent> {
    return this.httpClient.get<any>(this.getBaseUri() + `/repos/${user}/${repoName}/contents/`).pipe(
      map(data => data.find((item: GithubContent) => item.name === filePath))
    );
  }

  private getBaseUri(): string {
    return 'https://api.github.com';
  }

  getBlob(url: any): Observable<any> {
    return this.httpClient.get<any>(url);
  }
}
